<?php
 if (!defined('_INCLUDE')) die('"'.__FILE__.'" not executable... me, i abort.');


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    /**
     * Authenticate a user against a password file generated by Apache's htpasswd
     * using PHP rather than Apache itself.
     *
     * @param string $user The submitted user name
     * @param string $pass The submitted password
     * @param string $pass_file='.htpasswd' The system path to the htpasswd file
     * @param string $crypt_type='DES' The crypt type used to create the htpasswd file
     * @return bool
     */
    function http_authenticate($user,$pass,$access_file='.htaccess',$crypt_type='DES'){
        // the stuff below is just an example useage that restricts
        // user names and passwords to only alpha-numeric characters.
        if(!ctype_alnum($user)){
            // invalid user name
            return FALSE;
        };

        if(!ctype_alnum($pass)){
            // invalid password
            return FALSE;
        };

        if(file_exists($access_file) && is_readable($access_file)) {
									// the access file exists, open it
									if($fp=fopen($access_file,'r')) {
										while($line=fgets($fp)){
											// for each line in the file remove line endings
											$line=preg_replace('`[\r\n]$`','',$line);
											list($key,$value) = explode(' ',$line);
											if (strtolower($key) == 'authuserfile') {
												$pass_file = $value;
											};
										};
									};
        // get the information from the htpasswd file
        if(file_exists($pass_file) && is_readable($pass_file)){
            // the password file exists, open it
            if($fp=fopen($pass_file,'r')){
                while($line=fgets($fp)){
                    // for each line in the file remove line endings
                    $line=preg_replace('`[\r\n]$`','',$line);
                    if (stripos($line, ':') !== FALSE) {
																					list($fuser,$fpass)=explode(':',$line);
																					if($fuser==$user){
																									// the submitted user name matches this line
																									// in the file
																									switch($crypt_type){
																													case 'DES':
																																	// the salt is the first 2
																																	// characters for DES encryption
																																	$salt=substr($fpass,0,2);

																																	// use the salt to encode the
																																	// submitted password
																																	$test_pw=crypt($pass,$salt);
																																	break;
																													case 'PLAIN':
																																	$test_pw=$pass;
																																	break;
																													case 'SHA':
																													case 'MD5':
																													default:
																																	// unsupported crypt type
																																	fclose($fp);
																																	return FALSE;
																									}
																									if($test_pw == $fpass){
																													// authentication success.
																													fclose($fp);
																													return TRUE;
																									}else{
																													return FALSE;
																									}
																					}
																				};
                }
            }else{
                // could not open the password file
                return FALSE;
            }
        } else {
            return FALSE;
        }
        } else {
            return FALSE;
        }
    }
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


	$auth = FALSE;
	$current_user = '';
	if (isset($_SERVER['HTTP_AUTHORIZATION'])) {
		list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) = explode(':', base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6)));
	};
	switch (TRUE) {
		case (isset($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])) :
			$auth = http_authenticate($_SERVER['PHP_AUTH_USER'],$_SERVER['PHP_AUTH_PW']);
			if ($auth==TRUE) {
				$current_user = $_SERVER['PHP_AUTH_USER'];
			};
			break;
		case (isset($_SERVER['REMOTE_USER'])) :
			$auth = $_SERVER['REMOTE_USER'] != '';
			if ($auth==TRUE) {
				$current_user = $_SERVER['REMOTE_USER'];
			};
			break;
		case (isset($_SERVER['REDIRECT_REMOTE_USER'])) :
			$auth = $_SERVER['REDIRECT_REMOTE_USER'] != '';
			if ($auth==TRUE) {
				$current_user = $_SERVER['REDIRECT_REMOTE_USER'];
			};
			break;
	};
	if (($auth==TRUE) && ($current_user != '')) {
		define('USER_AUTHENTICATED',TRUE);
	};
	if (!(defined('USER_AUTHENTICATED') && USER_AUTHENTICATED)) {
		// the user has not been authenticated, present a login form.
		header('WWW-Authenticate: Basic realm="Login to Authenticate"');
		header('HTTP/1.0 401 Unauthorized');
				// if cancel the login form, below is what they get
		echo '<html>';
		echo '<head>';
		echo '<meta http-equiv="refresh" content="0;url=/" />';
		echo '</head>';
		echo '<body>';
		echo '</body>';
		echo '</html>';
		exit;
	};

	require_once(str_replace('//','/',dirname(__FILE__).'/').'_protected/account.inc.php');


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

/* NO ?> IN FILE .INC */
